# -*- coding: utf-8 -*-
"""Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kqV-oi0mhBwVAA6qx_zAjsd1T1FkX70x
"""

from google.colab import drive
drive.mount('/content/drive')

!ls "drive/MyDrive/Colab Notebooks/OrganisedSearch/data"

import numpy as np
import spacy
from sentence_transformers import SentenceTransformer
from transformers import pipeline

pip install python-docx

pip install PyPDF2

from docx import Document
import csv
import openpyxl
import PyPDF2

from sklearn.metrics.pairwise import cosine_similarity

question_answerer = pipeline("question-answering", model='distilbert-base-cased-distilled-squad')

model = SentenceTransformer('all-MiniLM-L6-v2')

import os

file_paths="drive/MyDrive/Colab Notebooks/OrganisedSearch/data"

files=os.listdir(file_paths)

print("files:",files)

def get_embedding(text):
    return model.encode(text)

def extract_text_from_pdf(file_path):
    if not os.path.exists(file_path):
        print(f"Error: File not found - {file_path}")
        return ""

    text = ""
    with open(file_path, "rb") as file:
        reader = PyPDF2.PdfReader(file)
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n"
    return text.strip()

def extract_text_from_txt(file_path):
    if not os.path.exists(file_path):
        print(f"Error: File not found - {file_path}")
        return ""

    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read().strip()

def extract_text_from_docx(file_path):
    if not os.path.exists(file_path):
        print(f"Error: File not found - {file_path}")
        return ""

    doc = Document(file_path)
    return '\n'.join([para.text for para in doc.paragraphs]).strip()

def extract_text_from_csv(file_path):
    if not os.path.exists(file_path):
        print(f"Error: File not found - {file_path}")
        return ""

    with open(file_path, 'r', encoding='utf-8') as file:
        reader = csv.reader(file)
        return '\n'.join([' '.join(row) for row in reader]).strip()

def extract_text_from_xlsx(file_path):
    if not os.path.exists(file_path):
        print(f"Error: File not found - {file_path}")
        return ""

    wb = openpyxl.load_workbook(file_path)
    sheet = wb.active
    text = ""
    for row in sheet.iter_rows(values_only=True):
        text += ' '.join([str(cell) for cell in row if cell is not None]) + '\n'
    return text.strip()

def load_files(directory):
    file_paths = [os.path.join(directory, file) for file in os.listdir(directory)]
    file_texts = []
    file_names = []

    for file_path in file_paths:
        text = ""
        if file_path.endswith(".pdf"):
            text = extract_text_from_pdf(file_path)
        elif file_path.endswith(".txt"):
            text = extract_text_from_txt(file_path)
        elif file_path.endswith(".docx"):
            text = extract_text_from_docx(file_path)
        elif file_path.endswith(".csv"):
            text = extract_text_from_csv(file_path)
        elif file_path.endswith(".xlsx"):
            text = extract_text_from_xlsx(file_path)
        else:
            print(f"Skipping unsupported file type: {file_path}")
            continue

        if text:  # Ensure file is not empty
            file_texts.append(text)
            file_names.append(os.path.basename(file_path))

    return file_texts, file_names

def extract_text_from_file(file_path):
    """
    Extracts text from a single file based on its format.
    Supported formats: PDF, TXT, DOCX, CSV, XLSX
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"File not found: {file_path}")

    text = ""

    if file_path.endswith(".pdf"):
        text = extract_text_from_pdf(file_path)
    elif file_path.endswith(".txt"):
        text = extract_text_from_txt(file_path)
    elif file_path.endswith(".docx"):
        text = extract_text_from_docx(file_path)
    elif file_path.endswith(".csv"):
        text = extract_text_from_csv(file_path)
    elif file_path.endswith(".xlsx"):
        text = extract_text_from_xlsx(file_path)
    else:
        raise ValueError(f"Unsupported file type: {file_path}")

    return text

file_path_one = "drive/MyDrive/Colab Notebooks/OrganisedSearch/data/bch(1).pdf"
text = extract_text_from_file(file_path_one)

print("text:",text)

question="Difference between online and offline wallets"

answer = question_answerer(question=question, context=text)

print("Answer:",answer)

print(text[197687:197714])

def compute_all_similarities(file_texts, file_names, threshold=0.8):
    file_embeddings = model.encode(file_texts)  # Get embeddings
    similarity_matrix = cosine_similarity(file_embeddings)

    similar_files = []
    for i in range(len(file_names)):
        for j in range(i + 1, len(file_names)):  # Avoid redundant comparisons
            similarity_score = similarity_matrix[i][j]
            if similarity_score >= threshold:
                similar_files.append({
                    "file1": file_names[i],
                    "file2": file_names[j],
                    "similarity_score": round(similarity_score * 100, 2)
                })
    print("similar_files:",similar_files)

    return similar_files

file_texts, file_names = load_files(file_paths)

similar_files = compute_all_similarities(file_texts, file_names)

print("similar_files:",similar_files)

def search_files(query, file_texts, file_names, top_n=5):
    query_embedding = model.encode([query])  # Convert query to embedding
    file_embeddings = model.encode(file_texts)  # Convert files to embeddings
    similarities = cosine_similarity(query_embedding, file_embeddings)[0]

    ranked_files = sorted(
        zip(file_names, similarities), key=lambda x: x[1], reverse=True
    )

    return [{"file": file, "score": round(score * 100, 2)} for file, score in ranked_files[:top_n]]

search_query = "the appropriate use of capitals"
search_results = search_files(search_query, file_texts, file_names)

print("\nðŸ”¹ Search results:")
for result in search_results:
    print(f"{result['file']} | Relevance: {result['score']}%")

